rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isPlayer(gameDoc) {
      return isAuthenticated() && 
        request.auth.uid in gameDoc.data.players.map(p => p.uid);
    }
    
    function isCurrentPlayer(gameDoc) {
      return isAuthenticated() && 
        gameDoc.data.players[gameDoc.data.currentTurn].uid == request.auth.uid;
    }
    
    function isValidMove(gameDoc) {
      return isCurrentPlayer(gameDoc) &&
        gameDoc.data.status == 'in_progress' &&
        request.resource.data.moves.size() == resource.data.moves.size() + 1;
    }
    
    function hasValidTournamentEntry(tournamentDoc) {
      return isAuthenticated() &&
        request.auth.uid in tournamentDoc.data.participants.map(p => p.uid);
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && 
        // Prevent manipulation of stats
        request.resource.data.wins == resource.data.wins &&
        request.resource.data.losses == resource.data.losses &&
        request.resource.data.draws == resource.data.draws &&
        request.resource.data.xp == resource.data.xp &&
        request.resource.data.level == resource.data.level &&
        request.resource.data.coins == resource.data.coins &&
        request.resource.data.gems == resource.data.gems;
      allow delete: if false; // Never allow deletion
    }
    
    // User statistics (server-managed)
    match /users/{userId}/stats/{statId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can write stats
    }
    
    // Games collection
    match /games/{gameId} {
      allow read: if isAuthenticated() && 
        (isPlayer(resource) || resource.data.isPrivate == false);
      
      allow create: if isAuthenticated() &&
        request.resource.data.players[0].uid == request.auth.uid &&
        request.resource.data.status == 'waiting';
      
      allow update: if isAuthenticated() && isPlayer(resource) &&
        (
          // Allow joining a waiting game
          (resource.data.status == 'waiting' && 
           request.resource.data.status == 'waiting') ||
          
          // Allow only current player to make moves
          (resource.data.status == 'in_progress' &&
           isValidMove(resource)) ||
          
          // Allow resignation
          (resource.data.status == 'in_progress' &&
           request.resource.data.status == 'abandoned' &&
           isPlayer(resource))
        );
      
      allow delete: if false; // Never delete games
    }
    
    // Moves collection (append-only)
    match /games/{gameId}/moves/{moveId} {
      allow read: if isAuthenticated() && 
        isPlayer(get(/databases/$(database)/documents/games/$(gameId)));
      
      allow create: if isAuthenticated() &&
        isCurrentPlayer(get(/databases/$(database)/documents/games/$(gameId))) &&
        request.resource.data.playerId == request.auth.uid &&
        request.resource.data.gameId == gameId;
      
      allow update: if false; // Moves are immutable
      allow delete: if false; // Moves cannot be deleted
    }
    
    // Chat messages
    match /games/{gameId}/chat/{messageId} {
      allow read: if isAuthenticated() && 
        isPlayer(get(/databases/$(database)/documents/games/$(gameId)));
      
      allow create: if isAuthenticated() &&
        isPlayer(get(/databases/$(database)/documents/games/$(gameId))) &&
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.type in ['text', 'emoji', 'sticker'] &&
        request.resource.data.message.size() <= 500;
      
      allow update: if isOwner(resource.data.senderId) &&
        // Only allow editing own messages
        request.resource.data.senderId == resource.data.senderId &&
        request.resource.data.edited == true;
      
      allow delete: if false;
    }
    
    // Lobbies
    match /lobbies/{lobbyId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() &&
        request.resource.data.hostId == request.auth.uid;
      
      allow update: if isAuthenticated() &&
        (
          // Host can update settings
          (resource.data.hostId == request.auth.uid) ||
          
          // Players can join/leave
          (request.resource.data.players.size() <= resource.data.config.maxPlayers)
        );
      
      allow delete: if isOwner(resource.data.hostId) &&
        resource.data.status == 'open';
    }
    
    // Tournaments
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() &&
        request.auth.token.admin == true; // Only admins can create tournaments
      
      allow update: if isAuthenticated() &&
        (
          // Admin updates
          (request.auth.token.admin == true) ||
          
          // Player registration
          (resource.data.status == 'registration' &&
           request.resource.data.participants.size() == resource.data.participants.size() + 1 &&
           request.auth.uid in request.resource.data.participants.map(p => p.uid))
        );
      
      allow delete: if false;
    }
    
    // Tournament matches
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow read: if isAuthenticated() &&
        hasValidTournamentEntry(get(/databases/$(database)/documents/tournaments/$(tournamentId)));
      
      allow write: if false; // Server-managed only
    }
    
    // Leaderboards (public read, server write)
    match /leaderboards/{boardId} {
      allow read: if true; // Public leaderboards
      allow write: if false; // Server-managed only
    }
    
    // Skins/Shop items
    match /skins/{skinId} {
      allow read: if true; // Public catalog
      allow write: if false; // Admin only
    }
    
    // User purchases
    match /users/{userId}/purchases/{purchaseId} {
      allow read: if isOwner(userId);
      allow write: if false; // Server-managed only
    }
    
    // Notifications
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isOwner(userId);
      allow update: if isOwner(userId) &&
        // Only allow marking as read
        request.resource.data.read == true &&
        request.resource.data.keys().hasAll(resource.data.keys());
      allow create: if false; // Server-managed
      allow delete: if isOwner(userId);
    }
    
    // Friend requests
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.from || 
         request.auth.uid == resource.data.to);
      
      allow create: if isAuthenticated() &&
        request.resource.data.from == request.auth.uid &&
        request.resource.data.status == 'pending';
      
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.to &&
        request.resource.data.status in ['accepted', 'rejected'];
      
      allow delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.from || 
         request.auth.uid == resource.data.to);
    }
    
    // Reports/Moderation
    match /reports/{reportId} {
      allow create: if isAuthenticated() &&
        request.resource.data.reporterId == request.auth.uid;
      allow read: if request.auth.token.admin == true;
      allow update: if request.auth.token.admin == true;
      allow delete: if false;
    }
  }
}